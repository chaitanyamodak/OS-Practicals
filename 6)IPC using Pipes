#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fcntl.h>

int main() {
    int pipe_fd1[2], pipe_fd2[2];
    pid_t child_pid;

    // Create pipes
    if (pipe(pipe_fd1) == -1 || pipe(pipe_fd2) == -1) {
        perror("Pipe creation failed");
        exit(EXIT_FAILURE);
    }

    // Fork a child process
    if ((child_pid = fork()) == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    if (child_pid == 0) { // Child process
        close(pipe_fd1[1]);  // Close write end of pipe 1
        close(pipe_fd2[0]);  // Close read end of pipe 2

        char file_path[100];
        // Read file path from the parent
        read(pipe_fd1[0], file_path, sizeof(file_path));
        close(pipe_fd1[0]);

        // Read file contents and write to the parent
        int file = open(file_path, O_RDONLY);
        char buffer[4096];
        int bytes_read;

        while ((bytes_read = read(file, buffer, sizeof(buffer))) > 0) {
            write(pipe_fd2[1], buffer, bytes_read);
        }

        close(pipe_fd2[1]);
        close(file);
    } else { // Parent process
        close(pipe_fd1[0]);  // Close read end of pipe 1
        close(pipe_fd2[1]);  // Close write end of pipe 2

        char file_path[] = "/path/to/your/file.txt";
        // Write file path to the child
        write(pipe_fd1[1], file_path, sizeof(file_path));
        close(pipe_fd1[1]);

        // Read file contents from the child and display
        char buffer[4096];
        int bytes_read;

        while ((bytes_read = read(pipe_fd2[0], buffer, sizeof(buffer))) > 0) {
            write(STDOUT_FILENO, buffer, bytes_read);
        }

        close(pipe_fd2[0]);

        // Wait for the child to finish
        wait(NULL);
    }

    return 0;
}
