//producer consumer
#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
# define max_item 5
# define buffer_size 5
sem_t empty;
sem_t full;
int in=0;
int out=0;

int buffer[buffer_size];
pthread_mutex_t mutex;
void producer(void *pno)
{
	int item;
	for(int i=0;i<max_item;i++)
	{
		item=rand();
		sem_wait(&empty);
		pthread_mutex_lock(&mutex);
		buffer[in]=item;
		printf("Producer %d insert item %d at %d\n",*((int*)pno),buffer[in],in);
		in=(in+1)%buffer_size;
		pthread_mutex_unlock(&mutex);
		sem_post(&full);
	}
}
void consumer(void *cno)
{
	int item;
	for(int i=0;i<max_item;i++)
	{
		sem_wait(&full);
		pthread_mutex_lock(&mutex);
		item=buffer[out];
		printf("Consumer %d remove item %d from %d\n",*((int*)cno),item,out);
		out=(out+1)%buffer_size;
		pthread_mutex_unlock(&mutex);
		sem_post(&empty);
	}
}
int main()
{
	pthread_t pno[5],con[5];
	pthread_mutex_init(&mutex,NULL);
	
	sem_init(&empty,0,buffer_size);
	sem_init(&full,0,0);
	
	int a[5]={1,2,3,4,5};
	
	for(int i=0;i<5;i++)
	{
		pthread_create(&pno[i],NULL,(void*)producer,(void*)&a[i]);
	}
	for(int i=0;i<5;i++) 
	{
		pthread_create(&con[i],NULL,(void*)consumer,(void*)&a[i]);
	}
	for(int i=0;i<5;i++)
	{
		pthread_join(pno[i],NULL);
	}
	for(int i=0;i<5;i++)
	{
		pthread_join(con[i],NULL);
	}
	pthread_mutex_destroy(&mutex);
	sem_destroy(&empty);
	sem_destroy(&full);
	return 0;
}