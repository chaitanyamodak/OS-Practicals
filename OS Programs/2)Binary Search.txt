2)Binary Search:

main.c: The main program that accepts an integer array and creates a child process.
sort.c: A separate file that contains the sorting logic.
search.c: Another file for the binary search logic.


main.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    // The integer array to be sorted
    int arr[] = {4, 2, 7, 1, 3, 5, 6};

    // Finding the number of elements in the array
    int n = sizeof(arr) / sizeof(arr[0]);

    // Variables for sorting
    int i, j, temp;

    // Variable to hold the process ID
    pid_t pid;

    // Creating a new process
    pid = fork();

    if (pid == 0) {  // child process
        // Creating arguments for the new process
        char* args[2];
        args[0] = "./search";  // Name of the new program to execute
        args[1] = NULL;  // NULL termination for the arguments
        // Executing the new program
        execvp(args[0], args);
    } else if (pid > 0) {  // parent process
        // Sorting the array using Bubble Sort algorithm
        for (i = 0; i < n - 1; i++) {
            for (j = 0; j < n - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }

        // Printing the sorted array
        printf("Sorted array: ");
        for (i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
    } else {
        // Handling the case when fork fails
        printf("Fork failed");
    }

    // Returning 0 to indicate successful execution
    return 0;
}
---------------------------------------------------------------------------------------

search.c


#include <stdio.h>
#include <stdlib.h>

// Recursive function for binary search
int binarySearch(int arr[], int l, int r, int x) {
    if (r >= l) {
        int mid = l + (r - l) / 2;

        if (arr[mid] == x)
            return mid;

        if (arr[mid] > x)
            return binarySearch(arr, l, mid - 1, x);

        return binarySearch(arr, mid + 1, r, x);
    }

    return -1;  // If the element is not found
}

// Main function for searching in the array
int main() {
    // Array to be searched
    int arr[] = {1, 2, 3, 4, 5, 6, 7};

    // Finding the number of elements in the array
    int n = sizeof(arr) / sizeof(arr[0]);

    // Element to be searched
    int x = 4;

    // Calling the binary search function
    int result = binarySearch(arr, 0, n - 1, x);

    // Printing the result of the search
    if (result == -1)
        printf("Element is not present in array");
    else
        printf("Element is present at index %d", result);

    // Returning 0 to indicate successful execution
    return 0;
}

--------------------------------------------------------------------------------------------------
/*
Steps for execution:
1)Save the first block of code as main.c.
2)Save the second block of code as search.c.
3)Open your terminal and navigate to the directory where you saved the files.
4)Compile each source file separately using the following commands:
	gcc main.c -o main
	gcc search.c -o search
5)Run the main executable
	./main

*/