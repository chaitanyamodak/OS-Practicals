3)Matrix Multiplication

#include <stdio.h>
#include <pthread.h>

#define SIZE 3

int matA[SIZE][SIZE] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; // First matrix
int matB[SIZE][SIZE] = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}}; // Second matrix
int matC[SIZE][SIZE]; // Result matrix

// Thread function for multiplying elements
void *multiply(void *arg) {
    int *data = (int *)arg; // Casting the argument to an integer pointer
    int i, row = data[0], col = data[1], sum = 0;

    // Matrix multiplication
    for (i = 0; i < SIZE; i++) {
        sum += matA[row][i] * matB[i][col];
    }
    matC[row][col] = sum; // Storing the result in the result matrix
    pthread_exit(NULL); // Exiting the thread
}

int main() {
    pthread_t threads[SIZE * SIZE]; // Array to hold thread IDs
    int i, j, count = 0, data[2];

    // Loop through each element of the matrices
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            data[0] = i; // Storing the row index
            data[1] = j; // Storing the column index
            pthread_create(&threads[count], NULL, multiply, data); // Creating threads
            count++;
        }
    }

    // Joining threads
    for (i = 0; i < SIZE * SIZE; i++) {
        pthread_join(threads[i], NULL);
    }

    // Displaying the result matrix
    printf("Matrix C:\n");
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf("%d\t", matC[i][j]);
        }
        printf("\n");
    }
    return 0;
}


/*
-gcc matrix multiplication.c
-./matrix multiplication
*/